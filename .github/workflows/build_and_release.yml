name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Define Matrix
        id: matrix
        run: |
          echo 'os=[ubuntu-latest, windows-latest, macos-latest]' >> "$GITHUB_OUTPUT"
          echo 'target=[linux-x64, win-x64, osx-x64]' >> "$GITHUB_OUTPUT"

    outputs:
      os: ${{ steps.matrix.outputs.os }}
      target: ${{ steps.matrix.outputs.target }}

  version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Install GitVersion
      run: dotnet tool install -g GitVersion.Tool

    - name: Determine version
      id: gitversion
      run: dotnet-gitversion /output json /showvariable FullSemVer

    outputs:
      FullSemVer: steps.gitversion.outputs.FullSemVer

  build:
    needs:
      - define-matrix
      - version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(needs.define-matrix.outputs.os) }}
        target: ${{ fromJSON(needs.define-matrix.outputs.target) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r ${{ matrix.target }} --self-contained true -o ./publish

    - name: Create release artifact
      run: |
        mkdir -p release
        tar -czf release/${{ matrix.os }}-${{ matrix.target }}.tar.gz -C publish .
      if: runner.os != 'Windows'
      shell: bash

    - name: Create release artifact (Windows)
      run: |
        mkdir release
        Compress-Archive -Path publish\* -DestinationPath release\${{ matrix.os }}-${{ matrix.target }}.zip
      if: runner.os == 'Windows'
      shell: powershell

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.target }}
        path: release/${{ matrix.os }}-${{ matrix.target }}.*

  create_release:
    needs:
      - version
      - build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.FullSemVer }}
        release_name: Release ${{ needs.version.outputs.FullSemVer }}
        draft: false
        prerelease: false

  upload_artifacts:
    needs:
      - define-matrix
      - create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(needs.define-matrix.outputs.os) }}
        target: ${{ fromJSON(needs.define-matrix.outputs.target) }}
    steps:

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/${{ matrix.os }}-${{ matrix.target }}.*
        asset_name: ${{ matrix.os }}-${{ matrix.target }}.*
        asset_content_type: application/zip
